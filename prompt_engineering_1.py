# -*- coding: utf-8 -*-
"""Assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j1AkUAcDl9C7qXgZ3XQNqVtJd991q3Dx

# Assignment 1

### Author:

Esteban Cabrera (esteban.cabrera@pucp.edu.pe)

### Professor:

Alexander Quispe (alex.quispe@pucp.edu.pe)

### Feb 2024

# Section 1

For this section, we will extract the MASTER URBAN TRANSPORT PLAN FOR THE METROPOLITAN AREA OF LIMA AND CALLAO IN THE REPUBLIC OF PERU, developed by the Japan International Cooperation Agency (JICA) in 2005.
"""

!pip install openai tiktoken pypdf chromadb langchain

"""### Load the Document

"""

import requests

url = r"https://openjicareport.jica.go.jp/pdf/11798261_01.pdf"
response = requests.get(url)

with open("jica_2005.pdf", "wb") as document:
    document.write(response.content)

from pypdf import PdfReader

loadedPdf = PdfReader("jica_2005.pdf")
print("Número de páginas:", len(loadedPdf.pages), "\n\n")

print(loadedPdf.pages[10].extract_text())

"""### PDF to String"""

# Pasamos el pdf a un string

def pdfToString(path):
    documentText = ""
    loadedPdf = PdfReader(path)
    for page in loadedPdf.pages:
        documentText += page.extract_text()
    return documentText

bookText = pdfToString("jica_2005.pdf")

"""Finally, we review the PDF converted to a string."""

print(bookText)

"""### Chunking"""

!pip install tiktoken
import tiktoken
tokenizer = tiktoken.get_encoding("cl100k_base")
len(tokenizer.encode(bookText))

"""Since there is a high number of tokens for the text, we split it into chunks using the arguments `chunk_size=4000` and `chunk_overlap=50`. Additionally, we use the `tokenCounter()` function to determine if it will be necessary to further split each subset of text."""

def tokenCounter(text):
    return len(tokenizer.encode(text))

from langchain.text_splitter import RecursiveCharacterTextSplitter

textSplitter = RecursiveCharacterTextSplitter(
    chunk_size=4000,
    chunk_overlap=50,
    length_function=tokenCounter,
    separators = ["\n\n", ".", "\n", " "]
)

chunks = textSplitter.create_documents(
    [bookText],
    metadatas=[{"author": "Agencia Japonesa de Cooperación Internacional (JICA)", "year": "2005"}]
)

len(chunks)

print(chunks[0].page_content)

"""### Embeddings, knowledge base, and retrieval"""

from chromadb.utils.embedding_functions import OpenAIEmbeddingFunction

# Coloco mi API key
OPENAI_API_KEY = "enter-your-key"

openaiEmbedding = OpenAIEmbeddingFunction(
        api_key=OPENAI_API_KEY,
        model_name="text-embedding-3-small"
)

import chromadb

chromaClient = chromadb.PersistentClient()
collection = chromaClient.create_collection(
    name="jica2005_final",
    embedding_function=openaiEmbedding,
    metadata={"hnsw:space": "cosine"}
)

# [document.page_content for document in chunks]

collection.add(
        documents=[document.page_content for document in chunks],
        metadatas=[document.metadata for document in chunks],
        ids=[f"id{i+1}" for i in range(len(chunks))]
)

print(collection.get(ids=["id14"])["documents"][0])

collection.query(query_texts=["Mejorar el transporte público de Lima"])["documents"]

"""# Section 2

For this section, we will use a news article from El Comercio titled "El recorrido interminable del metro de Lima"
"""

import openai
import json
import requests
from bs4 import BeautifulSoup

from openai import OpenAI

client = OpenAI(api_key = "enter-your-key")

def getCompletion(prompt, model = "gpt-3.5-turbo-0125"):
    messages = [{"role": "user", "content": prompt}]
    response = client.chat.completions.create(
        model = model,
        messages = messages,
        temperature = 0)
    return response.choices[0].message.content

url = r"https://elcomercio.pe/opinion/editorial/el-recorrido-interminable-del-metro-de-lima-noticia/?ref=ecr"
response = requests.get(url)

news_article = response.text
news_article

soup = BeautifulSoup(news_article, 'html.parser')

json_data = json.loads(soup.find(type="application/ld+json").string)
json_data

"""We will focus on the articleBody section."""

articleBody = "Ayer, la primera etapa de la línea 2 del metro de Lima comenzó su marcha blanca, un período de prueba que se extenderá durante tres meses en los que los usuarios podrán viajar de manera gratuita a través de cinco de las 27 estaciones que conforman el proyecto. Según informó la Presidencia de la República en sus redes sociales, con el tramo inaugurado se podrá ir desde el mercado de Santa Anita a Evitamiento en apenas siete minutos, lo que sin duda facilitará la vida de las personas que acostumbran a hacer ese recorrido en muchísimo más tiempo y a través de un sistema de transporte tan caótico como peligroso. También es destacable que, por primera vez en su historia, Lima, una megalópolis que ya superó los 10 millones de habitantes, por fin cuente con un medio de transporte masivo subterráneo, algo que los habitantes de otras capitales en Sudamérica llevan décadas gozando. Y hasta aquí llegan las buenas noticias, porque, aunque es positivo que al menos un tramo de la línea 2 ya esté terminada y que su uso cambiará la vida de los vecinos de las estaciones operativas, estas no alcanzan a opacar el hecho central: que esta noticia llega seis años después de lo previsto. Como se recuerda, inicialmente la etapa que ayer empezó a rodar debía estar terminada para el 2017. Sin embargo, una serie de demoras entre el Estado y la concesionaria contribuyeron a dilatar estos plazos. Según una fuente cercana a esta última, el primero se demoró en entregar los terrenos para las obras. Pero, por otro lado, Carlos Ugaz, expresidente de la Autoridad Autónoma del Tren Eléctrico, le contó a este Diario que “los estudios de ingeniería y los permisos municipales los debe hacer la concesionaria; como esta no ha cumplido, para encubrir su incumplimiento dice que el Estado no les entrega los terrenos”. El afectado, en última instancia, es el usuario que lleva años esperando un proyecto como la línea 2 que, una vez concluido, debería trasladar hasta a un millón de personas al día entre el Callao y Ate. Esta obra se concluirá en su totalidad en el 2024; es decir, con siete años de retraso y, si las otras cuatro líneas del metro que están proyectadas se construyen a la misma velocidad a la que se levantó esta, ninguno de los que leemos este editorial estaremos vivos para verlas en operación. Lo anterior no es una exageración. Este Diario ha determinado que en Lima se construye, en promedio, un kilómetro de metro al año. A este ritmo, tomaría más de 100 años ver las seis líneas del metro en acción. Los números son bajísimos incluso comparándonos con los países de la región. Para hacernos una idea, la línea 2 del metro empezó a construirse en el 2015. Ocho años después, se han terminado sus primeros cinco kilómetros. Entre 1969 y 1975 –es decir, en seis años–, Santiago de Chile levantó su primera línea de metro de 11,5 kilómetros. Otro ejemplo es el de Panamá. Si a Lima le tomó 35 años completar los 34,6 kilómetros que componen la línea 1 del metro, en el país centroamericano se construyeron 37 kilómetros de vías para sus líneas 1 y 2 del metro entre el 2011 y el 2019. Este reclamo que hacemos no es un capricho. Contar con un sistema de transporte masivo integrado, limpio y seguro impactaría de manera exponencial en la capital, por un lado, resguardando la integridad y la salud física y mental de los usuarios, y por el otro, mejorando la productividad y reduciendo el tiempo que los limeños pierden en trasladarse de un lado a otro. Una línea del metro puede cambiar literalmente la vida de millones de personas. Por eso, el metro de Lima no puede continuar con este recorrido interminable que no le permite llegar a su estación final. Ya es hora de que las autoridades dejen de conformarse con las fotos de personas viajando sonrientes en los vagones inaugurados y empiecen a remover los obstáculos que evitan que los limeños cuenten con un sistema de transporte público eficiente."

"""a. Create a prompt to summarize that text in Spanish, ensuring it does not exceed 100 words."""

prompt = f"""
Your task is to summarize a news article given below.

The summary must be 100 words maximum \
and it must contain the main parts of the article.
You must respond in Spanish.

Article: ```{articleBody}```
"""

response = getCompletion(prompt)
print(response)

"""b. Create a prompt to extract all the topics discussed."""

prompt = f"""
Your task is to extract the five main topics of a news article given below.

The topics must be maximum three words long.
You must respond in Spanish.

Article: ```{articleBody}```
"""

response = getCompletion(prompt)
print(response)

"""c. Create a prompt to perform a sentiment analysis. The output should be in JSON format, where each key is the name of the sentiment.

"""

prompt = f"""
Your task is to extract sentiments of the five main topics of a news article given below.

The topics must be maximum three words long.
You must respond in Spanish.

The output must be in a json format following "topic":"sentiment"

Article: ```{articleBody}```
"""

response = getCompletion(prompt)
print(response)

prompt = f"""
Your task is to extract segments of the text and identify the sentiments caused by that fragment. \
You must use one of the following sentiments: "Alegría", "Tristeza".
You must extract five segments.

You must respond in Spanish.

The output must be in a json format where the keys is the name of the sentiment and the value is the segment of the \
text that caused that sentiment.

Article: ```{articleBody}```
"""

response = getCompletion(prompt)
print(response)

"""d. Create a prompt that includes all the previous prompts, and each response will be contained in a JSON key. That is, key 1 will be "prompt_1": response..., "prompt_2": response.... The entire GPT response should be in a single output."""

prompt = f"""
Your will be given a news article below. You must do three tasks.

Task 1: Summarize the text
Task 2: Extract five main topics of the text
Task 3: Given the topics in Task 2, extract the sentiment associated to that topic. \
        Use the following sentiments "Positivo", "Negativo".

The output must be in a json format following "task" : "response".
The output must be in Spanish.

Article: ```{articleBody}```
"""

response = getCompletion(prompt)
print(response)

